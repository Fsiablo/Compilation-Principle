Microsoft (R) Macro Assembler Version 6.11		    05/14/23 18:04:28
tempfile.asm						     Page 1 - 1


				assume cs:code,ds:data,ss:stack,es:extended
 0000				extended segment
 0000  0400 [				db 1024 dup (0)
        00
       ]
 0400				extended ends
 0000				stack segment
 0000  0400 [				db 1024 dup (0)
        00
       ]
 0400				stack ends
 0000				data segment
 0000  0100 [				t_buff_p db 256 dup (24h)
        24
       ]
 0100  0100 [				t_buff_s db 256 dup (0)
        00
       ]
 0200 0A 4F 75 74 70 75			t_w db 0ah,'Output:',0
       74 3A 00
 0209 0A 49 6E 70 75 74			t_r db 0ah,'Input:',0
       3A 00
 0211 0000				_n dw 0
 0213 0000				_i dw 0
 0215 0000				_j dw 0
 0217				data ends
 0000				code segment
 0000				start:
 0000  B8 ---- R			mov ax,extended
 0003  8E C0				mov es,ax
 0005  B8 ---- R			mov ax,stack
 0008  8E D0				mov ss,ax
 000A  BC 0400				mov sp,1024
 000D  8B EC				mov bp,sp
 000F  B8 ---- R			mov ax,data
 0012  8E D8				mov ds,ax
 0014				_seg1:
 0014  B8 0000				mov ax,0
 0017  A3 0211 R			mov _n,ax
 001A				_seg2:
 001A  B8 0000				mov ax,0
 001D  A3 0213 R			mov _i,ax
 0020				_seg3:
 0020  B8 0000				mov ax,0
 0023  A3 0215 R			mov _j,ax
 0026				_seg4:
 0026  E8 014F				call _read
 0029  26: A3 0000			mov es:[0],ax
 002D				_seg5:
 002D  26: A1 0000			mov ax,es:[0]
 0031  A3 0211 R			mov _n,ax
 0034				_seg6:
 0034  A1 0211 R			mov ax,_n
 0037  50				push ax
 0038				_seg7:
 0038  E8 0198				call _write
 003B  26: A3 0002			mov es:[2],ax
 003F  E8 01D1				call dsp
 0042				_seg8:
 0042  B8 0002				mov ax,2
 0045  A3 0213 R			mov _i,ax
 0048				_seg9:
 0048  BA 0001				mov dx,1
 004B  A1 0213 R			mov ax,_i
 004E  3B 06 0211 R			cmp ax,_n
 0052  7C 03				jl _gt1
 0054  BA 0000				mov dx,0
 0057  26: 89 16 0004		_gt1: mov es:[4],dx
 005C				_seg10:
 005C  26: A1 0004			mov ax,es:[4]
 0060  83 F8 00				cmp ax,0
 0063  74 05				je _ez1
 0065  EA ---- 0070 R			jmp far ptr _seg12
 006A  90			_ez1: nop
 006B				_seg11:
 006B  EA ---- 013E R			jmp far ptr _seg32
 0070				_seg12:
 0070  B8 0002				mov ax,2
 0073  A3 0215 R			mov _j,ax
 0076				_seg13:
 0076  BA 0001				mov dx,1
 0079  A1 0215 R			mov ax,_j
 007C  3B 06 0213 R			cmp ax,_i
 0080  7C 03				jl _gt2
 0082  BA 0000				mov dx,0
 0085  26: 89 16 0006		_gt2: mov es:[6],dx
 008A				_seg14:
 008A  26: A1 0006			mov ax,es:[6]
 008E  83 F8 00				cmp ax,0
 0091  74 05				je _ez2
 0093  EA ---- 009E R			jmp far ptr _seg16
 0098  90			_ez2: nop
 0099				_seg15:
 0099  EA ---- 00F2 R			jmp far ptr _seg24
 009E				_seg16:
 009E  A1 0213 R			mov ax,_i
 00A1  BA 0000				mov dx,0
 00A4  8B 1E 0215 R			mov bx,_j
 00A8  F7 F3				div bx
 00AA  26: 89 16 0008			mov es:[8],dx
 00AF				_seg17:
 00AF  BA 0001				mov dx,1
 00B2  26: A1 0008			mov ax,es:[8]
 00B6  83 F8 00				cmp ax,0
 00B9  74 03				je _eq1
 00BB  BA 0000				mov dx,0
 00BE  26: 89 16 000A		_eq1: mov es:[10],dx
 00C3				_seg18:
 00C3  26: A1 000A			mov ax,es:[10]
 00C7  83 F8 00				cmp ax,0
 00CA  74 05				je _ez3
 00CC  EA ---- 00D7 R			jmp far ptr _seg20
 00D1  90			_ez3: nop
 00D2				_seg19:
 00D2  EA ---- 00DC R			jmp far ptr _seg21
 00D7				_seg20:
 00D7  EA ---- 00F2 R			jmp far ptr _seg24
 00DC				_seg21:
 00DC  A1 0215 R			mov ax,_j
 00DF  83 C0 01				add ax,1
 00E2  26: A3 000C			mov es:[12],ax
 00E6				_seg22:
 00E6  26: A1 000C			mov ax,es:[12]
 00EA  A3 0215 R			mov _j,ax
 00ED				_seg23:
 00ED  EA ---- 0076 R			jmp far ptr _seg13
 00F2				_seg24:
 00F2  BA 0001				mov dx,1
 00F5  A1 0215 R			mov ax,_j
 00F8  3B 06 0213 R			cmp ax,_i
 00FC  74 03				je _eq2
 00FE  BA 0000				mov dx,0
 0101  26: 89 16 000E		_eq2: mov es:[14],dx
 0106				_seg25:
 0106  26: A1 000E			mov ax,es:[14]
 010A  83 F8 00				cmp ax,0
 010D  74 05				je _ez4
 010F  EA ---- 011A R			jmp far ptr _seg27
 0114  90			_ez4: nop
 0115				_seg26:
 0115  EA ---- 0128 R			jmp far ptr _seg29
 011A				_seg27:
 011A  A1 0213 R			mov ax,_i
 011D  50				push ax
 011E				_seg28:
 011E  E8 00B2				call _write
 0121  26: A3 0010			mov es:[16],ax
 0125  E8 00EB				call dsp
 0128				_seg29:
 0128  A1 0213 R			mov ax,_i
 012B  83 C0 01				add ax,1
 012E  26: A3 0012			mov es:[18],ax
 0132				_seg30:
 0132  26: A1 0012			mov ax,es:[18]
 0136  A3 0213 R			mov _i,ax
 0139				_seg31:
 0139  EA ---- 0048 R			jmp far ptr _seg9
 013E				_seg32:
 013E  BA 0001				mov dx,1
 0141  A1 0215 R			mov ax,_j
 0144  3B 06 0213 R			cmp ax,_i
 0148  74 03				je _eq3
 014A  BA 0000				mov dx,0
 014D  26: 89 16 0014		_eq3: mov es:[20],dx
 0152				_seg33:
 0152  26: A1 0014			mov ax,es:[20]
 0156  83 F8 00				cmp ax,0
 0159  74 05				je _ez5
 015B  EA ---- 0166 R			jmp far ptr _seg35
 0160  90			_ez5: nop
 0161				_seg34:
 0161  EA ---- 0174 R			jmp far ptr quit
 0166				_seg35:
 0166  A1 0213 R			mov ax,_i
 0169  50				push ax
 016A				_seg36:
 016A  E8 0066				call _write
 016D  26: A3 0016			mov es:[22],ax
 0171  E8 009F				call dsp
 0174				quit:
 0174  B4 4C				mov ah,4ch
 0176  CD 21				int 21h
 0178				_read:
 0178  55			    push bp
 0179  8B EC			    mov bp,sp
 017B  BB 0209 R		    mov bx,offset t_r
 017E  E8 0006			    call _print
 0181  BB 0100 R		    mov bx,offset t_buff_s
 0184  BF 0000			    mov di,0
 0187  BE 0000			_print:mov si,0
 018A  BF 0000 R			mov di,offset t_buff_p
 018D				_r_lp_1:
 018D  B4 01			    mov ah,1
 018F  CD 21			    int 21h
 0191  3C 0D			    cmp al,0dh
 0193  74 05			    je _r_brk_1
 0195  88 01			    mov ds:[bx+di],al
 0197  47			    inc di
 0198  EB F3			    jmp short _r_lp_1
 019A				_r_brk_1:
 019A  B4 02			    mov ah,2
 019C  B2 0A			    mov dl,0ah
 019E  CD 21			    int 21h
 01A0  B8 0000			    mov ax,0
 01A3  BE 0000			    mov si,0
 01A6  B9 000A			    mov cx,10
 01A9				_r_lp_2:
 01A9  8A 10			    mov dl,ds:[bx+si]
 01AB  80 FA 30			    cmp dl,30h
 01AE  72 15			    jb _r_brk_2
 01B0  80 FA 39			    cmp dl,39h
 01B3  77 10			    ja _r_brk_2
 01B5  80 EA 30			    sub dl,30h
 01B8  88 10			    mov ds:[bx+si],dl
 01BA  F7 E1			    mul cx
 01BC  8A 10			    mov dl,ds:[bx+si]
 01BE  B6 00			    mov dh,0
 01C0  03 C2			    add ax,dx
 01C2  46				inc si
 01C3  EB E4				jmp short _r_lp_2
 01C5				_r_brk_2:
 01C5  8B CF			    mov cx,di
 01C7  BE 0000				mov si,0
 01CA				_r_lp_3:
 01CA  C6 00 00			    mov byte ptr ds:[bx+si],0
 01CD  E2 FB				loop _r_lp_3
 01CF  8B E5				mov sp,bp
 01D1  5D				pop bp
 01D2  C3				ret
 01D3				_write:
 01D3  50			    push ax
 01D4  53			    push bx
 01D5  52			    push dx
 01D6  85 C0			    test ax,ax
 01D8  75 08			    jnz sign_
 01DA  B2 30			    mov dl,'0'
 01DC  B4 02			    mov ah,2
 01DE  CD 21			    int 21h
 01E0  EB 2D			    jmp dsiw5
 01E2  79 0C			sign_:jns sign_2
 01E4  8B D8			    mov bx,ax
 01E6  B2 2D			    mov dl,'-'
 01E8  B4 02			    mov ah,2
 01EA  CD 21			    int 21h
 01EC  8B C3			    mov ax,bx
 01EE  F7 D8			    neg ax
 01F0  BB 000A			sign_2:mov bx,10
 01F3  53			    push bx
 01F4  83 F8 00			sign_3:cmp ax,0
 01F7  74 0A			    jz sign_4
 01F9  33 D2			    xor dx,dx
 01FB  F7 F3			    div bx
 01FD  80 C2 30			    add dl,30h
 0200  52			    push dx
 0201  EB F1			    jmp sign_3
 0203  5A			sign_4:pop dx
 0204  80 FA 0A			    cmp dl,10
 0207  74 06			    je dsiw5
 0209  B4 02			    mov ah,2;
 020B  CD 21			    int 21h
 020D  EB F4			    jmp sign_4
 020F  5A			dsiw5:pop dx
 0210  5B			    pop bx
 0211  58			    pop ax
 0212  C3			    ret
 0213				dsp:
 0213  50			    push ax
 0214  52			    push dx
 0215  B2 0D			    mov dl,0dh
 0217  B4 02			    mov ah,2
 0219  CD 21			    int 21h
 021B  B2 0A			    mov dl, 0ah
 021D  CD 21			    int 21h
 021F  5A			    pop dx
 0220  58			    pop ax
 0221  C3			    ret
 0222  B0 4C			ex: mov al,4ch
 0224  CD 21			    int 21h

 0226				code ends
				end start


Microsoft (R) Macro Assembler Version 6.11		    05/14/23 18:04:28
tempfile.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

code . . . . . . . . . . . . . .	16 Bit	 0226	  Para	  Private 
data . . . . . . . . . . . . . .	16 Bit	 0217	  Para	  Private 
extended . . . . . . . . . . . .	16 Bit	 0400	  Para	  Private 
stack  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Private 


Symbols:

                N a m e                 Type     Value    Attr

_eq1 . . . . . . . . . . . . . .	L Near	 00BE	  code	
_eq2 . . . . . . . . . . . . . .	L Near	 0101	  code	
_eq3 . . . . . . . . . . . . . .	L Near	 014D	  code	
_ez1 . . . . . . . . . . . . . .	L Near	 006A	  code	
_ez2 . . . . . . . . . . . . . .	L Near	 0098	  code	
_ez3 . . . . . . . . . . . . . .	L Near	 00D1	  code	
_ez4 . . . . . . . . . . . . . .	L Near	 0114	  code	
_ez5 . . . . . . . . . . . . . .	L Near	 0160	  code	
_gt1 . . . . . . . . . . . . . .	L Near	 0057	  code	
_gt2 . . . . . . . . . . . . . .	L Near	 0085	  code	
_i . . . . . . . . . . . . . . .	Word	 0213	  data	
_j . . . . . . . . . . . . . . .	Word	 0215	  data	
_n . . . . . . . . . . . . . . .	Word	 0211	  data	
_print . . . . . . . . . . . . .	L Near	 0187	  code	
_r_brk_1 . . . . . . . . . . . .	L Near	 019A	  code	
_r_brk_2 . . . . . . . . . . . .	L Near	 01C5	  code	
_r_lp_1  . . . . . . . . . . . .	L Near	 018D	  code	
_r_lp_2  . . . . . . . . . . . .	L Near	 01A9	  code	
_r_lp_3  . . . . . . . . . . . .	L Near	 01CA	  code	
_read  . . . . . . . . . . . . .	L Near	 0178	  code	
_seg10 . . . . . . . . . . . . .	L Near	 005C	  code	
_seg11 . . . . . . . . . . . . .	L Near	 006B	  code	
_seg12 . . . . . . . . . . . . .	L Near	 0070	  code	
_seg13 . . . . . . . . . . . . .	L Near	 0076	  code	
_seg14 . . . . . . . . . . . . .	L Near	 008A	  code	
_seg15 . . . . . . . . . . . . .	L Near	 0099	  code	
_seg16 . . . . . . . . . . . . .	L Near	 009E	  code	
_seg17 . . . . . . . . . . . . .	L Near	 00AF	  code	
_seg18 . . . . . . . . . . . . .	L Near	 00C3	  code	
_seg19 . . . . . . . . . . . . .	L Near	 00D2	  code	
_seg1  . . . . . . . . . . . . .	L Near	 0014	  code	
_seg20 . . . . . . . . . . . . .	L Near	 00D7	  code	
_seg21 . . . . . . . . . . . . .	L Near	 00DC	  code	
_seg22 . . . . . . . . . . . . .	L Near	 00E6	  code	
_seg23 . . . . . . . . . . . . .	L Near	 00ED	  code	
_seg24 . . . . . . . . . . . . .	L Near	 00F2	  code	
_seg25 . . . . . . . . . . . . .	L Near	 0106	  code	
_seg26 . . . . . . . . . . . . .	L Near	 0115	  code	
_seg27 . . . . . . . . . . . . .	L Near	 011A	  code	
_seg28 . . . . . . . . . . . . .	L Near	 011E	  code	
_seg29 . . . . . . . . . . . . .	L Near	 0128	  code	
_seg2  . . . . . . . . . . . . .	L Near	 001A	  code	
_seg30 . . . . . . . . . . . . .	L Near	 0132	  code	
_seg31 . . . . . . . . . . . . .	L Near	 0139	  code	
_seg32 . . . . . . . . . . . . .	L Near	 013E	  code	
_seg33 . . . . . . . . . . . . .	L Near	 0152	  code	
_seg34 . . . . . . . . . . . . .	L Near	 0161	  code	
_seg35 . . . . . . . . . . . . .	L Near	 0166	  code	
_seg36 . . . . . . . . . . . . .	L Near	 016A	  code	
_seg3  . . . . . . . . . . . . .	L Near	 0020	  code	
_seg4  . . . . . . . . . . . . .	L Near	 0026	  code	
_seg5  . . . . . . . . . . . . .	L Near	 002D	  code	
_seg6  . . . . . . . . . . . . .	L Near	 0034	  code	
_seg7  . . . . . . . . . . . . .	L Near	 0038	  code	
_seg8  . . . . . . . . . . . . .	L Near	 0042	  code	
_seg9  . . . . . . . . . . . . .	L Near	 0048	  code	
_write . . . . . . . . . . . . .	L Near	 01D3	  code	
dsiw5  . . . . . . . . . . . . .	L Near	 020F	  code	
dsp  . . . . . . . . . . . . . .	L Near	 0213	  code	
ex . . . . . . . . . . . . . . .	L Near	 0222	  code	
quit . . . . . . . . . . . . . .	L Near	 0174	  code	
sign_2 . . . . . . . . . . . . .	L Near	 01F0	  code	
sign_3 . . . . . . . . . . . . .	L Near	 01F4	  code	
sign_4 . . . . . . . . . . . . .	L Near	 0203	  code	
sign_  . . . . . . . . . . . . .	L Near	 01E2	  code	
start  . . . . . . . . . . . . .	L Near	 0000	  code	
t_buff_p . . . . . . . . . . . .	Byte	 0000	  data	
t_buff_s . . . . . . . . . . . .	Byte	 0100	  data	
t_r  . . . . . . . . . . . . . .	Byte	 0209	  data	
t_w  . . . . . . . . . . . . . .	Byte	 0200	  data	

	   0 Warnings
	   0 Errors
