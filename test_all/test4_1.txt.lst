Microsoft (R) Macro Assembler Version 6.11		    05/09/23 22:07:38
tempfile.asm						     Page 1 - 1


				assume cs:code,ds:data,ss:stack,es:extended
 0000				extended segment
 0000  0400 [				db 1024 dup (0)
        00
       ]
 0400				extended ends
 0000				stack segment
 0000  0400 [				db 1024 dup (0)
        00
       ]
 0400				stack ends
 0000				data segment
 0000  0100 [				t_buff_p db 256 dup (24h)
        24
       ]
 0100  0100 [				t_buff_s db 256 dup (0)
        00
       ]
 0200 0A 4F 75 74 70 75			t_w db 0ah,'Output:',0
       74 3A 00
 0209 0A 49 6E 70 75 74			t_r db 0ah,'Input:',0
       3A 00
 0211 0000				_m dw 0
 0213 0000				_a dw 0
 0215 0000				_b dw 0
 0217 0000				_c dw 0
 0219				data ends
 0000				code segment
 0000				start:
 0000  B8 ---- R			mov ax,extended
 0003  8E C0				mov es,ax
 0005  B8 ---- R			mov ax,stack
 0008  8E D0				mov ss,ax
 000A  BC 0400				mov sp,1024
 000D  8B EC				mov bp,sp
 000F  B8 ---- R			mov ax,data
 0012  8E D8				mov ds,ax
 0014				_seg1:
 0014  E8 0029				call _read
 0017  26: A3 0000			mov es:[0],ax
 001B				_seg2:
 001B  26: A1 0000			mov ax,es:[0]
 001F  A3 0211 R			mov _m,ax
 0022				_seg3:
 0022  A1 0211 R			mov ax,_m
 0025  50				push ax
 0026				_seg4:
 0026  E8 00C5				call _f
 0029  26: A3 0002			mov es:[2],ax
 002D				_seg5:
 002D  26: A1 0002			mov ax,es:[2]
 0031  50				push ax
 0032				_seg6:
 0032  E8 0066				call _write
 0035  26: A3 0004			mov es:[4],ax
 0039  E8 009F				call dispcrlf
 003C				quit:
 003C  B4 4C				mov ah,4ch
 003E  CD 21				int 21h
 0040				_read:
 0040  55			    push bp
 0041  8B EC			    mov bp,sp
 0043  BB 0209 R		    mov bx,offset t_r
 0046  E8 0006			    call _print
 0049  BB 0100 R		    mov bx,offset t_buff_s
 004C  BF 0000			    mov di,0
 004F  BE 0000			_print:mov si,0
 0052  BF 0000 R			mov di,offset t_buff_p
 0055				_r_lp_1:
 0055  B4 01			    mov ah,1
 0057  CD 21			    int 21h
 0059  3C 0D			    cmp al,0dh
 005B  74 05			    je _r_brk_1
 005D  88 01			    mov ds:[bx+di],al
 005F  47			    inc di
 0060  EB F3			    jmp short _r_lp_1
 0062				_r_brk_1:
 0062  B4 02			    mov ah,2
 0064  B2 0A			    mov dl,0ah
 0066  CD 21			    int 21h
 0068  B8 0000			    mov ax,0
 006B  BE 0000			    mov si,0
 006E  B9 000A			    mov cx,10
 0071				_r_lp_2:
 0071  8A 10			    mov dl,ds:[bx+si]
 0073  80 FA 30			    cmp dl,30h
 0076  72 15			    jb _r_brk_2
 0078  80 FA 39			    cmp dl,39h
 007B  77 10			    ja _r_brk_2
 007D  80 EA 30			    sub dl,30h
 0080  88 10			    mov ds:[bx+si],dl
 0082  F7 E1			    mul cx
 0084  8A 10			    mov dl,ds:[bx+si]
 0086  B6 00			    mov dh,0
 0088  03 C2			    add ax,dx
 008A  46				inc si
 008B  EB E4				jmp short _r_lp_2
 008D				_r_brk_2:
 008D  8B CF			    mov cx,di
 008F  BE 0000				mov si,0
 0092				_r_lp_3:
 0092  C6 00 00			    mov byte ptr ds:[bx+si],0
 0095  E2 FB				loop _r_lp_3
 0097  8B E5				mov sp,bp
 0099  5D				pop bp
 009A  C3				ret
 009B				_write:
 009B  50			    push ax
 009C  53			    push bx
 009D  52			    push dx
 009E  85 C0			    test ax,ax
 00A0  75 08			    jnz dsiw1
 00A2  B2 30			    mov dl,'0'
 00A4  B4 02			    mov ah,2
 00A6  CD 21			    int 21h
 00A8  EB 2D			    jmp dsiw5
 00AA  79 0C			dsiw1:jns dsiw2
 00AC  8B D8			    mov bx,ax
 00AE  B2 2D			    mov dl,'-'
 00B0  B4 02			    mov ah,2
 00B2  CD 21			    int 21h
 00B4  8B C3			    mov ax,bx
 00B6  F7 D8			    neg ax
 00B8  BB 000A			dsiw2:mov bx,10
 00BB  53			    push bx
 00BC  83 F8 00			dsiw3:cmp ax,0
 00BF  74 0A			    jz dsiw4
 00C1  33 D2			    xor dx,dx
 00C3  F7 F3			    div bx
 00C5  80 C2 30			    add dl,30h
 00C8  52			    push dx
 00C9  EB F1			    jmp dsiw3
 00CB  5A			dsiw4:pop dx
 00CC  80 FA 0A			    cmp dl,10
 00CF  74 06			    je dsiw5
 00D1  B4 02			    mov ah,2;
 00D3  CD 21			    int 21h
 00D5  EB F4			    jmp dsiw4
 00D7  5A			dsiw5:pop dx
 00D8  5B			    pop bx
 00D9  58			    pop ax
 00DA  C3			    ret
 00DB				dispcrlf:
 00DB  50			    push ax
 00DC  52			    push dx
 00DD  B2 0D			    mov dl,0dh
 00DF  B4 02			    mov ah,2
 00E1  CD 21			    int 21h
 00E3  B2 0A			    mov dl, 0ah
 00E5  CD 21			    int 21h
 00E7  5A			    pop dx
 00E8  58			    pop ax
 00E9  C3			    ret
 00EA  B0 4C			ex: mov al,4ch
 00EC  CD 21			    int 21h

 00EE  55			_f:push bp
 00EF  8B EC				mov bp,sp
 00F1  83 EC 02				sub sp,2
 00F4				_seg8:
 00F4  BA 0001				mov dx,1
 00F7  8B 46 04				mov ax,ss:[bp+4]
 00FA  83 F8 01				cmp ax,1
 00FD  74 03				je _eq1
 00FF  BA 0000				mov dx,0
 0102  89 56 4C			_eq1: mov ss:[bp+76],dx
 0105				_seg9:
 0105  8B 46 4C				mov ax,ss:[bp+76]
 0108  83 F8 00				cmp ax,0
 010B  74 05				je _ez1
 010D  EA ---- 0118 R			jmp far ptr _seg11
 0112  90			_ez1: nop
 0113				_seg10:
 0113  EA ---- 0124 R			jmp far ptr _seg13
 0118				_seg11:
 0118  B8 0001				mov ax,1
 011B  8B E5				mov sp,bp
 011D  5D				pop bp
 011E  C3				ret
 011F				_seg12:
 011F  EA ---- 014F R			jmp far ptr _seg17
 0124				_seg13:
 0124  BA 0001				mov dx,1
 0127  8B 46 04				mov ax,ss:[bp+4]
 012A  83 F8 02				cmp ax,2
 012D  74 03				je _eq2
 012F  BA 0000				mov dx,0
 0132  89 56 48			_eq2: mov ss:[bp+72],dx
 0135				_seg14:
 0135  8B 46 48				mov ax,ss:[bp+72]
 0138  83 F8 00				cmp ax,0
 013B  74 05				je _ez2
 013D  EA ---- 0148 R			jmp far ptr _seg16
 0142  90			_ez2: nop
 0143				_seg15:
 0143  EA ---- 014F R			jmp far ptr _seg17
 0148				_seg16:
 0148  B8 0002				mov ax,2
 014B  8B E5				mov sp,bp
 014D  5D				pop bp
 014E  C3				ret
 014F				_seg17:
 014F  BA 0001				mov dx,1
 0152  8B 46 04				mov ax,ss:[bp+4]
 0155  83 F8 03				cmp ax,3
 0158  74 03				je _eq3
 015A  BA 0000				mov dx,0
 015D  89 56 44			_eq3: mov ss:[bp+68],dx
 0160				_seg18:
 0160  8B 46 44				mov ax,ss:[bp+68]
 0163  83 F8 00				cmp ax,0
 0166  74 05				je _ez3
 0168  EA ---- 0173 R			jmp far ptr _seg20
 016D  90			_ez3: nop
 016E				_seg19:
 016E  EA ---- 017A R			jmp far ptr _seg21
 0173				_seg20:
 0173  B8 0004				mov ax,4
 0176  8B E5				mov sp,bp
 0178  5D				pop bp
 0179  C3				ret
 017A				_seg21:
 017A  8B 46 04				mov ax,ss:[bp+4]
 017D  83 E8 01				sub ax,1
 0180  89 46 40				mov ss:[bp+64],ax
 0183				_seg22:
 0183  8B 46 40				mov ax,ss:[bp+64]
 0186  50				push ax
 0187				_seg23:
 0187  E8 FF64				call _f
 018A  89 46 3C				mov ss:[bp+60],ax
 018D				_seg24:
 018D  8B 46 3C				mov ax,ss:[bp+60]
 0190  A3 0213 R			mov _a,ax
 0193				_seg25:
 0193  8B 46 04				mov ax,ss:[bp+4]
 0196  83 E8 02				sub ax,2
 0199  89 46 38				mov ss:[bp+56],ax
 019C				_seg26:
 019C  8B 46 38				mov ax,ss:[bp+56]
 019F  50				push ax
 01A0				_seg27:
 01A0  E8 FF4B				call _f
 01A3  89 46 34				mov ss:[bp+52],ax
 01A6				_seg28:
 01A6  8B 46 34				mov ax,ss:[bp+52]
 01A9  A3 0215 R			mov _b,ax
 01AC				_seg29:
 01AC  8B 46 04				mov ax,ss:[bp+4]
 01AF  83 E8 03				sub ax,3
 01B2  89 46 30				mov ss:[bp+48],ax
 01B5				_seg30:
 01B5  8B 46 30				mov ax,ss:[bp+48]
 01B8  50				push ax
 01B9				_seg31:
 01B9  E8 FF32				call _f
 01BC  89 46 2C				mov ss:[bp+44],ax
 01BF				_seg32:
 01BF  8B 46 2C				mov ax,ss:[bp+44]
 01C2  A3 0217 R			mov _c,ax
 01C5				_seg33:
 01C5  A1 0213 R			mov ax,_a
 01C8  03 06 0215 R			add ax,_b
 01CC  89 46 28				mov ss:[bp+40],ax
 01CF				_seg34:
 01CF  8B 46 28				mov ax,ss:[bp+40]
 01D2  03 06 0217 R			add ax,_c
 01D6  89 46 24				mov ss:[bp+36],ax
 01D9				_seg35:
 01D9  8B 46 24				mov ax,ss:[bp+36]
 01DC  8B E5				mov sp,bp
 01DE  5D				pop bp
 01DF  C3				ret
 01E0				code ends
				end start


Microsoft (R) Macro Assembler Version 6.11		    05/09/23 22:07:38
tempfile.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

code . . . . . . . . . . . . . .	16 Bit	 01E0	  Para	  Private 
data . . . . . . . . . . . . . .	16 Bit	 0219	  Para	  Private 
extended . . . . . . . . . . . .	16 Bit	 0400	  Para	  Private 
stack  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Private 


Symbols:

                N a m e                 Type     Value    Attr

_a . . . . . . . . . . . . . . .	Word	 0213	  data	
_b . . . . . . . . . . . . . . .	Word	 0215	  data	
_c . . . . . . . . . . . . . . .	Word	 0217	  data	
_eq1 . . . . . . . . . . . . . .	L Near	 0102	  code	
_eq2 . . . . . . . . . . . . . .	L Near	 0132	  code	
_eq3 . . . . . . . . . . . . . .	L Near	 015D	  code	
_ez1 . . . . . . . . . . . . . .	L Near	 0112	  code	
_ez2 . . . . . . . . . . . . . .	L Near	 0142	  code	
_ez3 . . . . . . . . . . . . . .	L Near	 016D	  code	
_f . . . . . . . . . . . . . . .	L Near	 00EE	  code	
_m . . . . . . . . . . . . . . .	Word	 0211	  data	
_print . . . . . . . . . . . . .	L Near	 004F	  code	
_r_brk_1 . . . . . . . . . . . .	L Near	 0062	  code	
_r_brk_2 . . . . . . . . . . . .	L Near	 008D	  code	
_r_lp_1  . . . . . . . . . . . .	L Near	 0055	  code	
_r_lp_2  . . . . . . . . . . . .	L Near	 0071	  code	
_r_lp_3  . . . . . . . . . . . .	L Near	 0092	  code	
_read  . . . . . . . . . . . . .	L Near	 0040	  code	
_seg10 . . . . . . . . . . . . .	L Near	 0113	  code	
_seg11 . . . . . . . . . . . . .	L Near	 0118	  code	
_seg12 . . . . . . . . . . . . .	L Near	 011F	  code	
_seg13 . . . . . . . . . . . . .	L Near	 0124	  code	
_seg14 . . . . . . . . . . . . .	L Near	 0135	  code	
_seg15 . . . . . . . . . . . . .	L Near	 0143	  code	
_seg16 . . . . . . . . . . . . .	L Near	 0148	  code	
_seg17 . . . . . . . . . . . . .	L Near	 014F	  code	
_seg18 . . . . . . . . . . . . .	L Near	 0160	  code	
_seg19 . . . . . . . . . . . . .	L Near	 016E	  code	
_seg1  . . . . . . . . . . . . .	L Near	 0014	  code	
_seg20 . . . . . . . . . . . . .	L Near	 0173	  code	
_seg21 . . . . . . . . . . . . .	L Near	 017A	  code	
_seg22 . . . . . . . . . . . . .	L Near	 0183	  code	
_seg23 . . . . . . . . . . . . .	L Near	 0187	  code	
_seg24 . . . . . . . . . . . . .	L Near	 018D	  code	
_seg25 . . . . . . . . . . . . .	L Near	 0193	  code	
_seg26 . . . . . . . . . . . . .	L Near	 019C	  code	
_seg27 . . . . . . . . . . . . .	L Near	 01A0	  code	
_seg28 . . . . . . . . . . . . .	L Near	 01A6	  code	
_seg29 . . . . . . . . . . . . .	L Near	 01AC	  code	
_seg2  . . . . . . . . . . . . .	L Near	 001B	  code	
_seg30 . . . . . . . . . . . . .	L Near	 01B5	  code	
_seg31 . . . . . . . . . . . . .	L Near	 01B9	  code	
_seg32 . . . . . . . . . . . . .	L Near	 01BF	  code	
_seg33 . . . . . . . . . . . . .	L Near	 01C5	  code	
_seg34 . . . . . . . . . . . . .	L Near	 01CF	  code	
_seg35 . . . . . . . . . . . . .	L Near	 01D9	  code	
_seg3  . . . . . . . . . . . . .	L Near	 0022	  code	
_seg4  . . . . . . . . . . . . .	L Near	 0026	  code	
_seg5  . . . . . . . . . . . . .	L Near	 002D	  code	
_seg6  . . . . . . . . . . . . .	L Near	 0032	  code	
_seg8  . . . . . . . . . . . . .	L Near	 00F4	  code	
_seg9  . . . . . . . . . . . . .	L Near	 0105	  code	
_write . . . . . . . . . . . . .	L Near	 009B	  code	
dispcrlf . . . . . . . . . . . .	L Near	 00DB	  code	
dsiw1  . . . . . . . . . . . . .	L Near	 00AA	  code	
dsiw2  . . . . . . . . . . . . .	L Near	 00B8	  code	
dsiw3  . . . . . . . . . . . . .	L Near	 00BC	  code	
dsiw4  . . . . . . . . . . . . .	L Near	 00CB	  code	
dsiw5  . . . . . . . . . . . . .	L Near	 00D7	  code	
ex . . . . . . . . . . . . . . .	L Near	 00EA	  code	
quit . . . . . . . . . . . . . .	L Near	 003C	  code	
start  . . . . . . . . . . . . .	L Near	 0000	  code	
t_buff_p . . . . . . . . . . . .	Byte	 0000	  data	
t_buff_s . . . . . . . . . . . .	Byte	 0100	  data	
t_r  . . . . . . . . . . . . . .	Byte	 0209	  data	
t_w  . . . . . . . . . . . . . .	Byte	 0200	  data	

	   0 Warnings
	   0 Errors
